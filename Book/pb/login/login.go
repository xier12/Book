// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: login.proto

package login

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request 请求内容(接收的参数)
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password     string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	CaptchaId    string `protobuf:"bytes,3,opt,name=CaptchaId,proto3" json:"CaptchaId,omitempty"`
	CaptchaValue string `protobuf:"bytes,4,opt,name=CaptchaValue,proto3" json:"CaptchaValue,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Request) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Request) GetCaptchaId() string {
	if x != nil {
		return x.CaptchaId
	}
	return ""
}

func (x *Request) GetCaptchaValue() string {
	if x != nil {
		return x.CaptchaValue
	}
	return ""
}

type Request2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Request2) Reset() {
	*x = Request2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request2) ProtoMessage() {}

func (x *Request2) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request2.ProtoReflect.Descriptor instead.
func (*Request2) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{1}
}

func (x *Request2) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Request2) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// Response 响应内容(c)
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Power string `protobuf:"bytes,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Response) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Response) GetPower() string {
	if x != nil {
		return x.Power
	}
	return ""
}

var File_login_proto protoreflect.FileDescriptor

var file_login_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x22, 0x7b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x30, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x32, 0x4e, 0x0a, 0x16, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x45, 0x0a, 0x11, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x12, 0x0f, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1a, 0x0f, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x49, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1a, 0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_login_proto_rawDescOnce sync.Once
	file_login_proto_rawDescData = file_login_proto_rawDesc
)

func file_login_proto_rawDescGZIP() []byte {
	file_login_proto_rawDescOnce.Do(func() {
		file_login_proto_rawDescData = protoimpl.X.CompressGZIP(file_login_proto_rawDescData)
	})
	return file_login_proto_rawDescData
}

var file_login_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_login_proto_goTypes = []interface{}{
	(*Request)(nil),  // 0: login.Request
	(*Request2)(nil), // 1: login.Request2
	(*Response)(nil), // 2: login.Response
}
var file_login_proto_depIdxs = []int32{
	0, // 0: login.LoginByUserNameService.LoginByUserName:input_type -> login.Request
	1, // 1: login.LoginByTelService.LoginByTel:input_type -> login.Request2
	1, // 2: login.LoginByEmailService.LoginByEmail:input_type -> login.Request2
	2, // 3: login.LoginByUserNameService.LoginByUserName:output_type -> login.Response
	2, // 4: login.LoginByTelService.LoginByTel:output_type -> login.Response
	2, // 5: login.LoginByEmailService.LoginByEmail:output_type -> login.Response
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_login_proto_init() }
func file_login_proto_init() {
	if File_login_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_login_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_login_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_login_proto_goTypes,
		DependencyIndexes: file_login_proto_depIdxs,
		MessageInfos:      file_login_proto_msgTypes,
	}.Build()
	File_login_proto = out.File
	file_login_proto_rawDesc = nil
	file_login_proto_goTypes = nil
	file_login_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoginByUserNameServiceClient is the client API for LoginByUserNameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoginByUserNameServiceClient interface {
	// 定义函数
	LoginByUserName(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type loginByUserNameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginByUserNameServiceClient(cc grpc.ClientConnInterface) LoginByUserNameServiceClient {
	return &loginByUserNameServiceClient{cc}
}

func (c *loginByUserNameServiceClient) LoginByUserName(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/login.LoginByUserNameService/LoginByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginByUserNameServiceServer is the server API for LoginByUserNameService service.
type LoginByUserNameServiceServer interface {
	// 定义函数
	LoginByUserName(context.Context, *Request) (*Response, error)
}

// UnimplementedLoginByUserNameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLoginByUserNameServiceServer struct {
}

func (*UnimplementedLoginByUserNameServiceServer) LoginByUserName(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByUserName not implemented")
}

func RegisterLoginByUserNameServiceServer(s *grpc.Server, srv LoginByUserNameServiceServer) {
	s.RegisterService(&_LoginByUserNameService_serviceDesc, srv)
}

func _LoginByUserNameService_LoginByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginByUserNameServiceServer).LoginByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginByUserNameService/LoginByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginByUserNameServiceServer).LoginByUserName(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoginByUserNameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "login.LoginByUserNameService",
	HandlerType: (*LoginByUserNameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginByUserName",
			Handler:    _LoginByUserNameService_LoginByUserName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login.proto",
}

// LoginByTelServiceClient is the client API for LoginByTelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoginByTelServiceClient interface {
	// 定义函数
	LoginByTel(ctx context.Context, in *Request2, opts ...grpc.CallOption) (*Response, error)
}

type loginByTelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginByTelServiceClient(cc grpc.ClientConnInterface) LoginByTelServiceClient {
	return &loginByTelServiceClient{cc}
}

func (c *loginByTelServiceClient) LoginByTel(ctx context.Context, in *Request2, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/login.LoginByTelService/LoginByTel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginByTelServiceServer is the server API for LoginByTelService service.
type LoginByTelServiceServer interface {
	// 定义函数
	LoginByTel(context.Context, *Request2) (*Response, error)
}

// UnimplementedLoginByTelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLoginByTelServiceServer struct {
}

func (*UnimplementedLoginByTelServiceServer) LoginByTel(context.Context, *Request2) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByTel not implemented")
}

func RegisterLoginByTelServiceServer(s *grpc.Server, srv LoginByTelServiceServer) {
	s.RegisterService(&_LoginByTelService_serviceDesc, srv)
}

func _LoginByTelService_LoginByTel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginByTelServiceServer).LoginByTel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginByTelService/LoginByTel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginByTelServiceServer).LoginByTel(ctx, req.(*Request2))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoginByTelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "login.LoginByTelService",
	HandlerType: (*LoginByTelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginByTel",
			Handler:    _LoginByTelService_LoginByTel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login.proto",
}

// LoginByEmailServiceClient is the client API for LoginByEmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoginByEmailServiceClient interface {
	// 定义函数
	LoginByEmail(ctx context.Context, in *Request2, opts ...grpc.CallOption) (*Response, error)
}

type loginByEmailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginByEmailServiceClient(cc grpc.ClientConnInterface) LoginByEmailServiceClient {
	return &loginByEmailServiceClient{cc}
}

func (c *loginByEmailServiceClient) LoginByEmail(ctx context.Context, in *Request2, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/login.LoginByEmailService/LoginByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginByEmailServiceServer is the server API for LoginByEmailService service.
type LoginByEmailServiceServer interface {
	// 定义函数
	LoginByEmail(context.Context, *Request2) (*Response, error)
}

// UnimplementedLoginByEmailServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLoginByEmailServiceServer struct {
}

func (*UnimplementedLoginByEmailServiceServer) LoginByEmail(context.Context, *Request2) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByEmail not implemented")
}

func RegisterLoginByEmailServiceServer(s *grpc.Server, srv LoginByEmailServiceServer) {
	s.RegisterService(&_LoginByEmailService_serviceDesc, srv)
}

func _LoginByEmailService_LoginByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginByEmailServiceServer).LoginByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginByEmailService/LoginByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginByEmailServiceServer).LoginByEmail(ctx, req.(*Request2))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoginByEmailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "login.LoginByEmailService",
	HandlerType: (*LoginByEmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginByEmail",
			Handler:    _LoginByEmailService_LoginByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login.proto",
}
